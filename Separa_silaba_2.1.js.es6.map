{"version": 3, "mappings": "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", "sources": ["Separa_silaba_2.1.py"], "names": ["lista", "l\u00c3a_arquivo", "nome1", "input", "nome2", "nome1.lower", "nome2.lower", "separa_silaba", "nome_final", "aleatorio", "L", "N1", "L.append", "i", "N2", "nome", "numeros", "silabas", "quant", "terminou", "esta_N1", "esta_N2", "num", "randint", "L.length", "L[num].lower", "L[num].lower().capitalize", "silabas.append", "numeros.append", "silabas.length", "V", "E", "silaba", "palavra", "N", "N.length", "palavra.append", "(silaba + N[i]).length", "arquivo", "open", "a", "arquivo.readline", "a.split", "arquivo.close", "lista.length"], "sourcesContent": ["from random import randint\n\n\ndef main():\n    lista = l\u00c3\u00aa_arquivo()\n    nome1 = input(\"Digite um nome: \")\n    nome2 = input(\"Digite outro nome: \")\n    nome1 = nome1.lower()\n    nome2 = nome2.lower()\n    nome1 = separa_silaba(nome1, lista)\n    nome2 = separa_silaba(nome2, lista)\n    nome_final = aleatorio(nome1, nome2)\n    print(nome_final)\n\n\ndef aleatorio(N1, N2):\n    L = []\n    for i in N1:\n        L.append(i)\n    for i in N2:\n        L.append(i)\n    nome = ''\n    numeros = []\n    silabas = []\n    i = 0\n    quant = 4\n    terminou = False\n    esta_N1 = 0\n    esta_N2 = 0\n    while i < quant and not terminou:\n        num = randint(0, len(L) - 1)\n        if num not in numeros:\n            if i == 0:\n                nome += L[num].lower().capitalize()\n                silabas.append(L[num])\n            else:\n                nome += L[num]\n                silabas.append(L[num])\n            numeros.append(num)\n            i += 1\n        if i == quant:\n            for i in range(len(silabas)):\n                if silabas[i] in N1:\n                    esta_N1 += 1\n                else:\n                    esta_N2 += 1\n            if esta_N1 == esta_N2:\n                terminou = True\n            else:\n                esta_N1 = 0\n                esta_N2 = 0\n                i = 0\n                nome = ''\n                numeros = []\n                silabas = []\n\n    return nome\n\n\ndef separa_silaba(N, L):\n    \"\"\"\n    C+V+R+S: se R for C, com C != L = ['l', 'r', 'n', 'm', 's', 'z', 'x'] cortar\n    em V. Se C e L, continuar lendo. Se R == C, CeL e S == V, formar duas silabas, C+V\n    e R+S, caso contrario formar C+V e ler a partir de R.\n\n    V+C+R+S: se C != L, cortar em V, caso contr\u00c3\u00a1rio, continuar lendo. Se R == V,\n    cortar em R, se R == C, continuar lendo, se S==V, cortar em R e formar as sila-\n    bas V e C+R+S (c+c+v). Se R == V\n    \n    \n    Exemplo: palha\u00c3\u00a7o - Formato C+V+C+C+V+C+V\n    Leitura: C + V, R = CeL -> continua lendo. S = C, forma C+V -> Le a partir de R.\n    Silaba formada: 'pa-'\n    \"\"\"\n    V = ['a', 'e', 'i', 'o', 'u']\n    E = ['l', 'm', 'n', 'r', 's', 'x', 'z']\n    silaba = ''\n    palavra = []\n    if N[0] in V:  #COME\u00c3\u2021A COM VOGAL\n        for i in range(len(N)):\n            #print(silaba+N[i], \"nada\", silaba+N[i] in L)\n            if silaba + N[i] in L:\n                print(N[i], silaba)\n                silaba += N[i]\n                #print(silaba, 'IF')\n                if i == len(N) - 1:\n                    print(\"entrou\", 1)\n                    palavra.append(silaba)\n            elif len(silaba + N[i]) == 3 and silaba + N[i] not in L:\n                if silaba[0] in V and silaba[1] + N[i] in L:\n                    #print(silaba[0], silaba[1]+N[i], 'ELIF')\n                    palavra.append(silaba[0])\n                    silaba = silaba[1] + N[i]\n                    if i == len(N) - 1:\n                        print(\"entrou\", 2)\n                        palavra.append(silaba)\n                elif silaba[0] in L and silaba[1] + N[\n                        i] not in L:  #PODERIA SER ELSE\n                    #print(silaba, N[i], \"ELIF ELIF\")\n                    palavra.append(silaba)\n                    silaba = ''\n                    silaba += N[i]\n                    if i == len(N) - 1:\n                        print(\"entrou\", 3)\n                        palavra.append(silaba)\n            elif len(silaba + N[i]) == 4:\n                if silaba[0] + silaba[1] in L and silaba[2] + N[i] in L:\n                    #print(silaba[0]+silaba[1], silaba[2]+N[i], \"ELIF IF\")\n                    palavra.append(silaba[0] + silaba[1])\n                    silaba = silaba[2] + N[i]\n                    if i == len(N) - 1:\n                        print(\"entrou\", 4)\n                        palavra.append(silaba)\n                elif silaba in L and N[i] in L:\n                    #print(silaba, N[i], \"ELIF ELIF2\")\n                    palavra.append(silaba)\n                    silaba = N[i]\n                    if i == len(N) - 1:\n                        print(\"entrou\", 5)\n                        palavra.append(silaba)\n            elif len(silaba + N[i]) == 5:\n                if silaba[0] + silaba[1] + silaba[2] in L and silaba[3] + N[\n                        i] in L:\n                    #print(silaba[0]+silaba[1]+silaba[2], silaba[3]+N[i], \"ELIF5 IF\")\n                    palavra.append(silaba[0] + silaba[1] + silaba[2])\n                    silaba = silaba[3] + N[i]\n                    if i == len(N) - 1:\n                        print(\"entrou\", 6)\n                        palavra.append(silaba)\n            else:\n                palavra.append(silaba)\n                silaba = ''\n                silaba += N[i]\n                #print(silaba, 'ELSE')\n\n    else:  #COME\u00c3\u2021A COM CONSOANTE\n        for i in range(len(N)):\n            #print(silaba+N[i], \"nada\", silaba+N[i] in L)\n            if silaba + N[i] in L:\n                silaba += N[i]\n                #print(silaba)\n                if i == len(N) - 1:\n                    print(\"entrou\", 7)\n                    palavra.append(silaba)\n            elif len(silaba + N[i]) == 3 and silaba + N[i] not in L:\n                if silaba[0] in V and silaba[1] + N[i] in L:\n                    #print(silaba[0], silaba[1]+N[i], 'ELIF')\n                    palavra.append(silaba[0])\n                    #palavra.append(silaba[1]+N[i])\n                    silaba = silaba[1] + N[i]\n                    if i == len(N) - 1:\n                        print(\"entrou\", 8)\n                        palavra.append(silaba)\n                elif silaba[0] in L and silaba[1] + N[\n                        i] not in L:  #PODERIA SER ELSE\n                    #print(silaba, N[i], \"ELIF ELIF\")\n                    palavra.append(silaba)\n                    silaba = ''\n                    silaba += N[i]\n                    if i == len(N) - 1:\n                        #print(\"SILABA\")\n                        print(\"entrou\", 9)\n                        palavra.append(silaba)\n            elif len(silaba + N[i]) == 4:\n                if i < len(N) - 2:\n                    if silaba in L and N[i] + N[i + 1] + N[i + 2] in L:\n                        #print(\"cond. espec.\")\n                        print(\"entrou\", 10)\n                        palavra.append(silaba)\n                        silaba = N[i]\n                    elif silaba[0] + silaba[1] in L and silaba[2] + N[i] in L:\n                        #print(silaba[0]+silaba[1], silaba[2]+N[i], \"ELIF IF\")\n                        palavra.append(silaba[0] + silaba[1])\n                        silaba = silaba[2] + N[i]\n                        if i == len(N) - 1:\n                            print(\"entrou\", 11)\n                            palavra.append(silaba)\n                    elif silaba in L and N[i] in L:\n                        #print(silaba, N[i], \"ELIF ELIF2\")\n                        palavra.append(silaba)\n                        silaba = N[i]\n                        if i == len(N) - 1:\n                            print(\"entrou\", 12)\n                            palavra.append(silaba)\n\n                else:\n                    if silaba[0] + silaba[1] in L and silaba[2] + N[i] in L:\n                        #print(silaba[0]+silaba[1], silaba[2]+N[i], \"ELIF IF\")\n                        palavra.append(silaba[0] + silaba[1])\n                        silaba = silaba[2] + N[i]\n                        if i == len(N) - 1:\n                            print(\"entrou\", 13)\n                            palavra.append(silaba)\n                    elif silaba in L and N[i] in L:\n                        #print(silaba, N[i], \"ELIF ELIF2\")\n                        palavra.append(silaba)\n                        silaba = N[i]\n                        if i == len(N) - 1:\n                            print(\"entrou\", 14)\n                            palavra.append(silaba)\n\n            else:\n                palavra.append(silaba)\n                #print(silaba)\n                silaba = ''\n                silaba += N[i]\n                if i == len(N) - 1:\n                    print(\"entrou\", 15)\n                    palavra.append(silaba)\n            #print(silaba in L)\n\n    return (palavra)\n\n\ndef l\u00c3\u00aa_arquivo():\n    lista = []\n    arquivo = open(\"SILABAS_FINAL.txt\", \"r\")\n    a = arquivo.readline()\n    lista = a.split()\n    arquivo.close()\n    print(len(lista))\n\n    return lista\n\n\nmain()\n"]}